# -*- coding: utf-8 -*-
"""Hirademy_Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hH9yKAV7-97Cyw9L9VOXZuz-dUuSZR7D
"""

# Importing necessary libraries for data analysis and visualization
import pandas as pd  # Data manipulation
import numpy as np   # Numerical operations
import seaborn as sns  # Statistical visualization
import matplotlib.pyplot as plt  # Plotting
from sklearn.preprocessing import LabelEncoder

data=pd.read_csv("/content/synthetic_investment_data (1).csv")
data

data.isnull()

data.isnull().sum()

data.head()

data.tail()

data.shape

data.describe()

data.info()

data.iloc[0]

data.nunique()

# Distribution of Age
plt.figure(figsize=(8, 6))
sns.histplot(data['Age'], bins=20, kde=True, color='skyblue')
plt.title('Distribution of Age')
plt.xlabel('Age')
plt.ylabel('Count')
plt.show()

# Distribution of Income
plt.figure(figsize=(8, 6))
sns.histplot(data['Income'], bins=20, kde=True, color='salmon')
plt.title('Distribution of Income')
plt.xlabel('Income')
plt.ylabel('Count')
plt.show()

# Relationship between Age and Financial Goals
plt.figure(figsize=(10, 6))
sns.boxplot(x='Financial_Goals', y='Age', data=data)
plt.title('Age Distribution by Financial Goals')
plt.xticks(rotation=45)
plt.show()

# Relationship between Income and Financial Goals
plt.figure(figsize=(10, 6))
sns.boxplot(x='Financial_Goals', y='Income', data=data)
plt.title('Income Distribution by Financial Goals')
plt.xticks(rotation=45)
plt.show()

# Scatter plot of Monthly Expenses vs. Existing Investments
plt.figure(figsize=(8, 6))
sns.scatterplot(x='Monthly_Expenses', y='Existing_Investments', data=data, hue='Financial_Goals')
plt.title('Monthly Expenses vs. Existing Investments')
plt.xlabel('Monthly Expenses')
plt.ylabel('Existing Investments')
plt.legend(title='Financial Goals')
plt.show()

# Bar plot of Risk Tolerance Level
plt.figure(figsize=(8, 6))
sns.countplot(x='Risk_Tolerance', data=data, palette='Set2')
plt.title('Distribution of Risk Tolerance Level')
plt.xlabel('Risk Tolerance Level')
plt.ylabel('Count')
plt.show()

# Encode categorical variables
label_encoder = LabelEncoder()
data['Risk_Tolerance'] = label_encoder.fit_transform(data['Risk_Tolerance'])
data.head()

# Encode categorical variables
label_encoder = LabelEncoder()
data['Financial_Goals'] = label_encoder.fit_transform(data['Financial_Goals'])
data.head()

# Perform one-hot encoding for hobbies/interests
hobbies_dummies = data['Hobbies_Interests'].str.get_dummies(sep=', ')
data = pd.concat([data, hobbies_dummies], axis=1)
data.drop(columns=['Hobbies_Interests'], inplace=True)
data.head()

# Perform one-hot encoding for hobbies/interests
hobbies_dummies = data['Investment_Preferences'].str.get_dummies(sep=', ')
data = pd.concat([data, hobbies_dummies], axis=1)
data.drop(columns=['Investment_Preferences'], inplace=True)
data.head()

#Min-Max scaling or Standardization
from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler()
numerical_columns = ['Age', 'Income', 'Monthly_Expenses', 'Existing_Investments', 'Family_Size', 'Debt_Obligations']
data[numerical_columns] = scaler.fit_transform(data[numerical_columns])

data.head()

data

"""#  Load and Preprocess the Dataset"""

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
import pandas as pd

# Load the dataset
data = pd.read_csv('/content/synthetic_investment_data (1).csv')

# Encode categorical variables
label_encoders = {}
categorical_features = ['Financial_Goals', 'Risk_Tolerance', 'Hobbies_Interests', 'Investment_Preferences']

for feature in categorical_features:
    label_encoders[feature] = LabelEncoder()
    data[feature] = label_encoders[feature].fit_transform(data[feature])

# Separate features and target variable
X = data.drop('Investment_Preferences', axis=1)
y = data['Investment_Preferences']

# Normalize numerical features
scaler = StandardScaler()
numerical_features = ['Age', 'Income', 'Monthly_Expenses', 'Existing_Investments', 'Family_Size', 'Debt_Obligations']
X[numerical_features] = scaler.fit_transform(X[numerical_features])

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=42)

# Explicitly define column names for X_train and X_test
X_train.columns = X.columns
X_test.columns = X.columns

"""#Train the model

"""

import pandas as pd
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier
from sklearn.metrics import classification_report

# Train Random Forest model
rf = RandomForestClassifier()
rf.fit(X_train, y_train)

# Train Decision Tree model
dt = DecisionTreeClassifier()
dt.fit(X_train, y_train)

"""#Logistic Regression"""

# Train Logistic Regression model
log_reg = LogisticRegression(max_iter=1000)
log_reg.fit(X_train, y_train)

# Train Gradient Boosting model
gb = GradientBoostingClassifier()
gb.fit(X_train, y_train)

# Function to preprocess user input
def preprocess_user_input(user_input):
    user_encoded = user_input.copy()
    missing_fields = [col for col in X.columns if col not in user_input]
    if missing_fields:
        print(f"Please provide the following information: {', '.join(missing_fields)}")
        return None

    for feature in ['Financial_Goals', 'Risk_Tolerance', 'Hobbies_Interests']:
        if user_input[feature] not in label_encoders[feature].classes_:
            print(f"Invalid value for {feature}. Please choose from: {', '.join(label_encoders[feature].classes_)}")
            return None
        user_encoded[feature] = label_encoders[feature].transform([user_input[feature]])[0]

    user_df = pd.DataFrame([user_encoded], columns=X.columns)
    user_df[numerical_features] = scaler.transform(user_df[numerical_features])
    return user_df

# Take input from the user
new_user = {}
new_user['Age'] = int(input("Enter your age: "))
new_user['Income'] = float(input("Enter your annual income: "))
new_user['Monthly_Expenses'] = float(input("Enter your monthly expenses: "))
new_user['Existing_Investments'] = float(input("Enter your existing investments: "))
new_user['Family_Size'] = int(input("Enter your family size: "))
new_user['Debt_Obligations'] = float(input("Enter your debt obligations: "))

print("Choose your financial goals from the following options:")
print(", ".join(label_encoders['Financial_Goals'].classes_))
new_user['Financial_Goals'] = input("Enter your financial goals: ")

print("Choose your risk tolerance from the following options (Low/Medium/High):")
new_user['Risk_Tolerance'] = input("Enter your risk tolerance: ")

print("Choose your hobbies or interests from the following options:")
print(", ".join(label_encoders['Hobbies_Interests'].classes_))
new_user['Hobbies_Interests'] = input("Enter your hobbies or interests: ")

# Preprocess user input
new_user_df = preprocess_user_input(new_user)

if new_user_df is not None:
    # Predict using the trained models
    pred_log_reg = log_reg.predict(new_user_df)[0]
    pred_dt = dt.predict(new_user_df)[0]
    pred_rf = rf.predict(new_user_df)[0]
    pred_gb = gb.predict(new_user_df)[0]

    # Decode the predictions
    investment_options = label_encoders['Investment_Preferences'].inverse_transform([pred_log_reg, pred_dt, pred_rf, pred_gb])

    # Print recommended investment options
    print("Recommended investment options:")
    print(f"Logistic Regression: {investment_options[0]}")
    print(f"Decision Tree: {investment_options[1]}")
    print(f"Random Forest: {investment_options[2]}")
    print(f"Gradient Boosting: {investment_options[3]}")